function doPost(e) {
    try {
        // CONFIGURACI√ìN CON TUS DATOS REALES
        const SHEET_ID = '1S7VX7essRAMnReGMtcFExhM7HuL5e5jvsNpurhhaEPY';
        const EMAIL_NOTIFICACION = 'ca1352@gmail.com';

        // Verificar si hay datos del formulario (JSON o FormData)
        if (!e || (!e.postData && !e.parameter)) {
            throw new Error('No hay datos del formulario. Este script debe ser llamado desde el formulario HTML.');
        }

        // Obtener los datos del formulario (puede venir como JSON o FormData)
        let data;
        if (e.postData && e.postData.contents) {
            // Datos como JSON
            data = JSON.parse(e.postData.contents);
        } else if (e.parameter) {
            // Datos como FormData
            data = e.parameter;
        } else {
            throw new Error('No se pudieron obtener los datos del formulario');
        }

        const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();

        // VALIDACI√ìN INTELIGENTE DE HEADERS
        const expectedHeaders = [
            'Fecha de Env√≠o',
            'Nombre del Negocio',
            'Propietarios',
            'Email',
            'Tel√©fono',
            'Fecha Inicio',
            'Ubicaci√≥n',
            'Origen de la Idea',
            'Descripci√≥n del Espacio',
            'Tipo de Local',
            'Costo Arriendo',
            'Registro Legal',
            'Raz√≥n No Registro',
            'Permisos',
            'Tipos de Permisos',
            'Contabilidad',
            'Control Financiero',
            'Seguros',
            'Detalles Seguros',
            'Servicios',
            'Otros Servicios',
            'Capacidad Diaria',
            'Capacidad Hospedaje',
            'Promedio Diario',
            'Promedio Mensual',
            'Horarios',
            'N√∫mero Propietarios',
            'N√∫mero Empleados',
            'Clientes Regulares',
            'Edad Promedio',
            'Nivel Socioecon√≥mico',
            'Zona Residencia',
            'Fuentes de Clientes',
            'Otras Fuentes Clientes',
            'Conoce Competencia',
            'Detalles Competencia',
            'Diferenciaci√≥n',
            'Tarifa Guarder√≠a',
            'Tarifa Hospedaje',
            'Tarifa Ba√±o',
            '√öltimo Ajuste Precios',
            'Otras Tarifas',
            'Ingresos Mensuales',
            'Gasto Comida',
            'Gasto Servicios',
            'Gasto Empleados',
            'Gasto Arriendo',
            'Otros Gastos',
            'Capital de Trabajo',
            'Monto Capital',
            'Redes Sociales Uso',
            'Otras Redes',
            'Frecuencia Publicaci√≥n',
            'Publicidad Pagada',
            'Detalles Publicidad',
            'P√°gina Web',
            'Promociones',
            'Tipos Promociones',
            'Principales Problemas',
            'Frustraciones',
            'Intentos Cambios',
            'Metas',
            'Dispuesto Invertir',
            'Explica Inversi√≥n',
            'Estado Instalaciones',
            'Equipos Herramientas',
            'Falta Infraestructura',
            'Veh√≠culo',
            'Alta Demanda',
            'Baja Demanda',
            'Cambios Mercado',
            'Impacto Pandemia',
            'Expectativas Consultor√≠a',
            'Informaci√≥n Adicional',
            'Horas Disponibles',
            'D√≠as Disponibles'
        ];

        let needsHeaders = false;
        let startRow = 1;

        // Verificar si la hoja est√° vac√≠a
        if (sheet.getLastRow() === 0) {
            console.log('üìã Hoja vac√≠a - Creando headers');
            needsHeaders = true;
            startRow = 1;
        } else {
            // Verificar si la primera fila tiene los headers correctos
            const firstRowData = sheet.getRange(1, 1, 1, expectedHeaders.length).getValues()[0];

            // Comparar headers existentes con los esperados
            let headersMatch = true;
            const existingHeaders = [];

            for (let i = 0; i < expectedHeaders.length; i++) {
                const existingHeader = firstRowData[i] ? String(firstRowData[i]).trim() : '';
                existingHeaders.push(existingHeader);

                if (existingHeader !== expectedHeaders[i]) {
                    headersMatch = false;
                }
            }

            if (headersMatch) {
                console.log('‚úÖ Headers correctos encontrados - Insertando en fila:', sheet.getLastRow() + 1);
                needsHeaders = false;
                startRow = sheet.getLastRow() + 1;
            } else {
                console.log('‚ö†Ô∏è Headers incorrectos o incompletos');
                console.log('üìã Headers existentes:', existingHeaders.slice(0, 5), '...');
                console.log('üìã Headers esperados:', expectedHeaders.slice(0, 5), '...');
                console.log('üîß Reemplazando headers y moviendo datos');

                // Obtener todos los datos existentes (sin la primera fila)
                let existingData = [];
                if (sheet.getLastRow() > 1) {
                    existingData = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
                }

                // Limpiar la hoja
                sheet.clear();

                // Crear headers correctos
                needsHeaders = true;
                startRow = 2;

                // Si hab√≠a datos, los volveremos a insertar despu√©s
                if (existingData.length > 0) {
                    console.log(`üìä Preservando ${existingData.length} filas de datos existentes`);
                    // Los datos existentes se insertar√°n despu√©s de los headers y el nuevo registro
                }
            }
        }

        // Crear headers si es necesario
        if (needsHeaders) {
            sheet.getRange(1, 1, 1, expectedHeaders.length).setValues([expectedHeaders]);

            // Formatear headers
            const headerRange = sheet.getRange(1, 1, 1, expectedHeaders.length);
            headerRange.setBackground('#2c3e50');
            headerRange.setFontColor('white');
            headerRange.setFontWeight('bold');
            headerRange.setFontSize(10);
            headerRange.setWrap(true);

            console.log('‚úÖ Headers creados y formateados');
        }

        // Preparar la fila de datos
        const rowData = [
            data.fechaEnvio || '',
            data.nombreNegocio || '',
            data.propietarios || '',
            data.email || '',
            data.telefono || '',
            data.fechaInicio || '',
            data.ubicacion || '',
            data.origenIdea || '',
            data.descripcionEspacio || '',
            data.tipoLocal || '',
            data.costoArriendo || '',
            data.registroLegal || '',
            data.razonNoRegistro || '',
            data.permisos || '',
            data.tiposPermisos || '',
            data.contabilidad || '',
            data.controlFinanciero || '',
            data.seguros || '',
            data.detallesSeguros || '',
            data.servicios || '',
            data.otrosServicios || '',
            data.capacidadDiaria || '',
            data.capacidadHospedaje || '',
            data.promedioDiario || '',
            data.promedioMensual || '',
            data.horarios || '',
            data.numeroPropietarios || '',
            data.numeroEmpleados || '',
            data.clientesRegulares || '',
            data.edadPromedio || '',
            data.nivelSocioeconomico || '',
            data.zonaResidencia || '',
            data.fuentesClientes || '',
            data.otrosFuentesClientes || '',
            data.conoceCompetencia || '',
            data.detallesCompetencia || '',
            data.diferenciacion || '',
            data.tarifaGuarderia || '',
            data.tarifaHospedaje || '',
            data.tarifaBano || '',
            data.ultimoAjustePrecios || '',
            data.otrosTarifas || '',
            data.ingresosMensuales || '',
            data.gastoComida || '',
            data.gastoServicios || '',
            data.gastoEmpleados || '',
            data.gastoArriendo || '',
            data.otrosGastos || '',
            data.capitalTrabajo || '',
            data.montoCapital || '',
            data.redesSocialesUso || '',
            data.otrasRedes || '',
            data.frecuenciaPublicacion || '',
            data.publicidadPagada || '',
            data.detallesPublicidad || '',
            data.paginaWeb || '',
            data.promociones || '',
            data.tiposPromociones || '',
            data.principalesProblemas || '',
            data.frustraciones || '',
            data.intentosCambios || '',
            data.metas || '',
            data.dispuestoInvertir || '',
            data.explicaInversion || '',
            data.estadoInstalaciones || '',
            data.equiposHerramientas || '',
            data.faltaInfraestructura || '',
            data.vehiculo || '',
            data.altaDemanda || '',
            data.bajaDemanda || '',
            data.cambiosMercado || '',
            data.impactoPandemia || '',
            data.expectativasConsultoria || '',
            data.informacionAdicional || '',
            data.horasDisponibles || '',
            data.diasDisponibles || ''
        ];

        // Insertar datos en la fila calculada
        console.log(`üìù Insertando datos en fila: ${startRow}`);
        sheet.getRange(startRow, 1, 1, rowData.length).setValues([rowData]);

        // Formatear la nueva fila de datos
        const dataRange = sheet.getRange(startRow, 1, 1, rowData.length);

        // Alternar colores de fila (solo para filas de datos, no headers)
        if (startRow > 1 && startRow % 2 === 0) {
            dataRange.setBackground('#f8f9fa');
        }

        // Ajustar ancho de columnas autom√°ticamente
        sheet.autoResizeColumns(1, rowData.length);

        console.log(`‚úÖ Datos insertados exitosamente en la fila ${startRow}`);
        console.log(`üìä Total de filas ahora: ${sheet.getLastRow()}`);

        // Informaci√≥n adicional para el log
        const totalRows = sheet.getLastRow();
        const dataRows = totalRows - 1; // Excluyendo header

        // Enviar email de notificaci√≥n
        const emailNotification = true; // Cambiar a false si no quieres emails

        if (emailNotification) {
            const subject = `Nueva Evaluaci√≥n: ${data.nombreNegocio || 'Sin nombre'}`;
            const body = `
Se ha recibido una nueva evaluaci√≥n de guarder√≠a canina:

Negocio: ${data.nombreNegocio || 'No especificado'}
Propietarios: ${data.propietarios || 'No especificado'}  
Email: ${data.email || 'No especificado'}
Tel√©fono: ${data.telefono || 'No especificado'}

Expectativas de la consultor√≠a:
${data.expectativasConsultoria || 'No especificado'}

üìä INFORMACI√ìN DE LA HOJA:
- Fila insertada: ${startRow}
- Total de filas: ${sheet.getLastRow()}
- Registros de datos: ${dataRows}
- Headers: ${needsHeaders ? 'Creados autom√°ticamente' : 'Validados correctamente'}

Puedes ver todos los detalles en la hoja de c√°lculo:
https://docs.google.com/spreadsheets/d/${SHEET_ID}

Enviado el: ${data.fechaEnvio}

---
Sistema automatizado de formularios - Guarder√≠a Canina
Validaci√≥n inteligente de headers activada ‚úÖ
      `;

            try {
                MailApp.sendEmail({
                    to: EMAIL_NOTIFICACION,
                    subject: subject,
                    body: body
                });
            } catch (emailError) {
                console.log('Error enviando email:', emailError);
            }
        }

        // Respuesta exitosa con informaci√≥n detallada
        return ContentService
            .createTextOutput(JSON.stringify({
                success: true,
                message: 'Datos guardados correctamente',
                timestamp: new Date().toISOString(),
                insertedRow: startRow,
                totalRows: sheet.getLastRow(),
                dataRows: dataRows,
                headersValidated: needsHeaders ? 'created' : 'validated'
            }))
            .setMimeType(ContentService.MimeType.JSON);

    } catch (error) {
        console.error('Error:', error);

        // Respuesta de error
        return ContentService
            .createTextOutput(JSON.stringify({
                success: false,
                message: 'Error al procesar los datos: ' + error.toString(),
                timestamp: new Date().toISOString()
            }))
            .setMimeType(ContentService.MimeType.JSON);
    }
}

// FUNCI√ìN CR√çTICA PARA CORS - Maneja requests OPTIONS (preflight)
function doOptions(e) {
    // Esta funci√≥n es esencial para evitar errores de CORS
    return ContentService
        .createTextOutput('')
        .setMimeType(ContentService.MimeType.TEXT);
}

// Funci√≥n GET para verificar que el webhook funciona
function doGet(e) {
    return ContentService
        .createTextOutput(JSON.stringify({
            status: 'Webhook funcionando correctamente',
            timestamp: new Date().toISOString(),
            method: 'GET',
            message: 'El sistema est√° listo para recibir datos del formulario',
            sheetId: '1S7VX7essRAMnReGMtcFExhM7HuL5e5jvsNpurhhaEPY',
            email: 'ca1352@gmail.com'
        }))
        .setMimeType(ContentService.MimeType.JSON);
}

// FUNCI√ìN DE PRUEBA - Ejecuta esta para verificar que todo funciona
function pruebaConexion() {
    try {
        // TUS DATOS REALES YA CONFIGURADOS
        const SHEET_ID = '1S7VX7essRAMnReGMtcFExhM7HuL5e5jvsNpurhhaEPY';
        const EMAIL_NOTIFICACION = 'ca1352@gmail.com';

        console.log('üîç Iniciando prueba de conexi√≥n...');
        console.log('üìã Sheet ID:', SHEET_ID);
        console.log('üìß Email:', EMAIL_NOTIFICACION);

        // Verificar conexi√≥n con Google Sheets
        const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();
        console.log('‚úÖ Conexi√≥n con Google Sheets: OK');
        console.log('üìä Nombre de la hoja:', sheet.getName());
        console.log('üìà N√∫mero de filas actuales:', sheet.getLastRow());

        // Probar validaci√≥n de headers
        console.log('üîç Probando validaci√≥n de headers...');
        if (sheet.getLastRow() === 0) {
            console.log('üìÑ Hoja vac√≠a - Headers se crear√°n autom√°ticamente');
        } else {
            console.log('üìã Hoja con datos - Validando headers existentes...');
            const firstRow = sheet.getRange(1, 1, 1, 10).getValues()[0];
            console.log('üìù Primeros 10 headers actuales:', firstRow);
        }

        // Agregar fila de prueba
        const datoPrueba = [
            new Date().toLocaleString('es-CO'),
            'PRUEBA - Sistema Validaci√≥n Headers',
            'Juan y Mar√≠a Prueba',
            'prueba@email.com',
            '555-1234',
            '-- PRUEBA VALIDACI√ìN INTELIGENTE --'
        ];

        sheet.appendRow(datoPrueba);
        console.log('‚úÖ Fila de prueba agregada exitosamente');
        console.log('üìä Filas despu√©s de prueba:', sheet.getLastRow());

        // Probar env√≠o de email
        try {
            MailApp.sendEmail({
                to: EMAIL_NOTIFICACION,
                subject: 'üß™ Prueba CORS Fixed - Guarder√≠a Canina',
                body: `¬°Hola!

Esta es una prueba del sistema con validaci√≥n inteligente de headers.

‚úÖ Google Apps Script: Funcionando
‚úÖ Google Sheets: Funcionando  
‚úÖ Env√≠o de emails: Funcionando
‚úÖ CORS: Solucionado con doOptions() y FormData
‚úÖ Validaci√≥n de Headers: Implementada

üîß NUEVA FUNCIONALIDAD - VALIDACI√ìN INTELIGENTE:
- Verifica autom√°ticamente si los headers est√°n correctos
- Si est√°n correctos: inserta datos en la siguiente fila
- Si est√°n incorrectos: corrige headers y preserva datos existentes
- Si la hoja est√° vac√≠a: crea headers autom√°ticamente

üìä Configuraci√≥n:
- Sheet ID: ${SHEET_ID}
- Email: ${EMAIL_NOTIFICACION}
- Headers validados: ${sheet.getRange(1, 1, 1, 5).getValues()[0].slice(0, 3).join(', ')}...
- Total filas: ${sheet.getLastRow()}
- Timestamp: ${new Date().toLocaleString('es-CO')}

üéØ FUNCIONES DISPONIBLES:
- pruebaConexion(): Prueba general del sistema
- validarYCorregirHeaders(): Validaci√≥n manual de headers
- limpiarDatosPrueba(): Elimina filas de prueba

¬°Sistema completamente funcional con validaci√≥n inteligente! üéâ
        `
            });
            console.log('‚úÖ Email de prueba enviado exitosamente');
        } catch (emailError) {
            console.log('‚ö†Ô∏è Error enviando email:', emailError.toString());
        }

        console.log('üéâ ¬°Prueba completada exitosamente!');
        console.log('üìù Revisa tu Google Sheet y tu email');
        console.log('üöÄ Sistema listo con validaci√≥n inteligente de headers');
        console.log('üîß Funciones disponibles: pruebaConexion, validarYCorregirHeaders, limpiarDatosPrueba');

        return 'Prueba completada - Sistema con validaci√≥n inteligente de headers funcionando';

    } catch (error) {
        console.error('‚ùå Error en la prueba:', error.toString());

        // Mostrar informaci√≥n √∫til para debug
        console.log('üîç Informaci√≥n de debug:');
        console.log('SHEET_ID:', '1S7VX7essRAMnReGMtcFExhM7HuL5e5jvsNpurhhaEPY');
        console.log('EMAIL:', 'ca1352@gmail.com');

        throw new Error('Error en la prueba: ' + error.toString());
    }
}

// Funci√≥n adicional para validar y corregir headers manualmente
function validarYCorregirHeaders() {
    try {
        const SHEET_ID = '1S7VX7essRAMnReGMtcFExhM7HuL5e5jvsNpurhhaEPY';
        const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();

        console.log('üîç Iniciando validaci√≥n manual de headers...');

        const expectedHeaders = [
            'Fecha de Env√≠o', 'Nombre del Negocio', 'Propietarios', 'Email', 'Tel√©fono',
            'Fecha Inicio', 'Ubicaci√≥n', 'Origen de la Idea', 'Descripci√≥n del Espacio',
            'Tipo de Local', 'Costo Arriendo', 'Registro Legal', 'Raz√≥n No Registro',
            'Permisos', 'Tipos de Permisos', 'Contabilidad', 'Control Financiero',
            'Seguros', 'Detalles Seguros', 'Servicios', 'Otros Servicios',
            'Capacidad Diaria', 'Capacidad Hospedaje', 'Promedio Diario', 'Promedio Mensual',
            'Horarios', 'N√∫mero Propietarios', 'N√∫mero Empleados', 'Clientes Regulares',
            'Edad Promedio', 'Nivel Socioecon√≥mico', 'Zona Residencia', 'Fuentes de Clientes',
            'Otras Fuentes Clientes', 'Conoce Competencia', 'Detalles Competencia',
            'Diferenciaci√≥n', 'Tarifa Guarder√≠a', 'Tarifa Hospedaje', 'Tarifa Ba√±o',
            '√öltimo Ajuste Precios', 'Otras Tarifas', 'Ingresos Mensuales', 'Gasto Comida',
            'Gasto Servicios', 'Gasto Empleados', 'Gasto Arriendo', 'Otros Gastos',
            'Capital de Trabajo', 'Monto Capital', 'Redes Sociales Uso', 'Otras Redes',
            'Frecuencia Publicaci√≥n', 'Publicidad Pagada', 'Detalles Publicidad',
            'P√°gina Web', 'Promociones', 'Tipos Promociones', 'Principales Problemas',
            'Frustraciones', 'Intentos Cambios', 'Metas', 'Dispuesto Invertir',
            'Explica Inversi√≥n', 'Estado Instalaciones', 'Equipos Herramientas',
            'Falta Infraestructura', 'Veh√≠culo', 'Alta Demanda', 'Baja Demanda',
            'Cambios Mercado', 'Impacto Pandemia', 'Expectativas Consultor√≠a',
            'Informaci√≥n Adicional', 'Horas Disponibles', 'D√≠as Disponibles'
        ];

        if (sheet.getLastRow() === 0) {
            console.log('üìÑ Hoja vac√≠a - Creando headers desde cero');
            sheet.getRange(1, 1, 1, expectedHeaders.length).setValues([expectedHeaders]);
        } else {
            // Verificar headers existentes
            const firstRowData = sheet.getRange(1, 1, 1, expectedHeaders.length).getValues()[0];
            let needsCorrection = false;
            const differences = [];

            for (let i = 0; i < expectedHeaders.length; i++) {
                const existing = firstRowData[i] ? String(firstRowData[i]).trim() : '';
                const expected = expectedHeaders[i];

                if (existing !== expected) {
                    needsCorrection = true;
                    differences.push({
                        column: i + 1,
                        existing: existing,
                        expected: expected
                    });
                }
            }

            if (needsCorrection) {
                console.log(`‚ö†Ô∏è Encontradas ${differences.length} diferencias en headers:`);
                differences.slice(0, 5).forEach(diff => {
                    console.log(`  Columna ${diff.column}: "${diff.existing}" ‚Üí "${diff.expected}"`);
                });

                // Preservar datos existentes
                let existingData = [];
                if (sheet.getLastRow() > 1) {
                    existingData = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
                    console.log(`üìä Preservando ${existingData.length} filas de datos`);
                }

                // Reemplazar headers
                sheet.getRange(1, 1, 1, expectedHeaders.length).setValues([expectedHeaders]);

                // Restaurar datos si exist√≠an
                if (existingData.length > 0) {
                    sheet.getRange(2, 1, existingData.length, existingData[0].length).setValues(existingData);
                }

                console.log('‚úÖ Headers corregidos exitosamente');
            } else {
                console.log('‚úÖ Headers ya est√°n correctos');
            }
        }

        // Formatear headers
        const headerRange = sheet.getRange(1, 1, 1, expectedHeaders.length);
        headerRange.setBackground('#2c3e50');
        headerRange.setFontColor('white');
        headerRange.setFontWeight('bold');
        headerRange.setFontSize(10);
        headerRange.setWrap(true);

        // Ajustar ancho de columnas
        sheet.autoResizeColumns(1, expectedHeaders.length);

        console.log('üé® Formato aplicado a headers');
        console.log(`üìã Headers validados: ${expectedHeaders.length} columnas`);
        console.log(`üìä Total de filas: ${sheet.getLastRow()}`);
        console.log(`üìà Filas de datos: ${Math.max(0, sheet.getLastRow() - 1)}`);

        return `Headers validados y corregidos. Total: ${expectedHeaders.length} columnas, ${sheet.getLastRow()} filas`;

    } catch (error) {
        console.error('‚ùå Error validando headers:', error.toString());
        throw new Error('Error en validaci√≥n de headers: ' + error.toString());
    }
}

// Funci√≥n adicional para limpiar datos de prueba
function limpiarDatosPrueba() {
    try {
        const SHEET_ID = '1S7VX7essRAMnReGMtcFExhM7HuL5e5jvsNpurhhaEPY';
        const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();

        console.log('üßπ Limpiando datos de prueba...');

        // Obtener todos los datos
        const data = sheet.getDataRange().getValues();
        const headers = data[0];

        // Filtrar filas que NO contengan "PRUEBA"
        const filteredData = data.filter((row, index) => {
            if (index === 0) return true; // Mantener headers
            return !row.some(cell => String(cell).includes('PRUEBA'));
        });

        // Limpiar hoja
        sheet.clear();

        // Volver a escribir datos sin pruebas
        if (filteredData.length > 0) {
            sheet.getRange(1, 1, filteredData.length, filteredData[0].length).setValues(filteredData);

            // Re-formatear headers
            const headerRange = sheet.getRange(1, 1, 1, headers.length);
            headerRange.setBackground('#2c3e50');
            headerRange.setFontColor('white');
            headerRange.setFontWeight('bold');
        }

        console.log('‚úÖ Datos de prueba eliminados');
        console.log(`üìä Filas restantes: ${filteredData.length - 1}`);

        return `Limpieza completada. Filas restantes: ${filteredData.length - 1}`;

    } catch (error) {
        console.error('‚ùå Error limpiando datos:', error.toString());
        throw new Error('Error en limpieza: ' + error.toString());
    }
}